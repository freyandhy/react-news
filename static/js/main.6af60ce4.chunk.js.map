{"version":3,"sources":["components/Header.js","components/Card.js","pages/App.js","data/api.js","serviceWorker.js","index.js","loading.svg"],"names":["Header","_ref","title","react_default","a","createElement","className","style","backgroundColor","color","textAlign","Card","image","author","desc","published","url","href","src","alt","height","objectFit","moment","fromNow","App","state","newsData","page","loading","error","this","fetchNews","LoadingImg","components_Header","_this2","arguments","length","undefined","concat","fetch","then","response","json","data","newsApi","console","log","nextData","articles","setState","catch","err","nextPage","_this3","_this$state","isEmpty","renderError","renderLoading","renderDataEmpty","map","article","index","components_Card","key","description","publishedAt","urlToImage","onClick","fetchNextPage","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_pages_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.6af60ce4.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = ({ title }) => {\n  return (\n    <div className=\"p-3\" style={{\n      backgroundColor: 'blue',\n    }}>\n      <h1 style={{\n        color: 'white',\n        textAlign: 'center'\n      }}>{title}</h1>\n    </div>\n  );\n}\n \nexport default Header;\n","import React from 'react';\nimport moment from 'moment';\nimport 'moment/locale/id';\n\nconst Card = ({\n  image,\n  title,\n  author,\n  desc,\n  published,\n  url }) => {\n  return (\n    <div className=\"card mt-5\">\n      <a href={url}>\n        <img\n          src={image}\n          alt={title}\n          className=\"card-img-top\"\n          style={{\n            height: '300px',\n            objectFit: 'cover'\n          }}\n        />\n      </a>\n      <div className=\"card-body\">\n        <a href={url}>\n          <h3 className=\"card-title\">{title}</h3>\n        </a>\n        <h5 className=\"card-subtitle text-muted mt-3 mb-4\">{author}</h5>\n        <p className=\"card-text\">{desc}</p>\n        <small className=\"text-muted\">{moment(published).fromNow()}</small>\n      </div>\n    </div>\n  );\n}\n \nexport default Card;","import React, { Component } from 'react';\nimport Header from '../components/Header';\nimport Card from '../components/Card';\nimport LoadingImg from '../loading.svg';\nimport './App.css';\n\nimport { newsApi } from '../data/api';\n\nclass App extends Component {\n  state = { \n    newsData: [],\n    page: 1,\n    loading: true,\n    error: false\n  }\n\n  componentDidMount() {\n    this.fetchNews();\n  }\n\n  renderLoading() {\n    return <div className=\"text-center mt-5\"><img src={LoadingImg} alt=\"loading\" /></div>\n  }\n\n  renderDataEmpty() {\n    return <h2 className=\"text-center mt-5\">Oops, Sorry. Empty News</h2>\n  }\n\n  renderError() {\n    return(\n      <div>\n        <Header title=\"News React\" />\n        <h5 className=\"mt-5 text-center text-danger\">\n          Opps, Sorry. Error\n        </h5>\n      </div>\n    );\n  }\n\n  fetchNews(page = 1) {\n    newsApi(page)\n      .then(data => {\n        console.log(data);\n        const { newsData } = this.state;\n        const nextData = newsData.concat(data.articles);\n        this.setState({\n          newsData: nextData,\n          loading: false\n        })\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({\n          loading: false,\n          error: true\n        })\n      })\n  }\n\n  fetchNextPage() {\n    const { page } = this.state;\n    const nextPage = page + 1;\n\n    this.fetchNews(nextPage);\n    this.setState({\n      page: nextPage\n    })\n  }\n   \n  render() { \n    const { loading, newsData, error } = this.state;\n    const isEmpty = !loading && newsData.length === 0;\n    if(error) return this.renderError();\n    return (\n      <div className=\"App\">\n        <Header title=\"News React\" />\n        <div className=\"container pb-5\">\n          <div className=\"row\">\n            <div className=\"col-12 col-md-8 offset-md-2\">\n              {loading && this.renderLoading()}\n              {isEmpty && this.renderDataEmpty()}\n              {!loading && newsData.map((article, index) => {\n                return <Card\n                  key={index}\n                  author={article.author}\n                  desc={article.description}\n                  published={article.publishedAt}\n                  title={article.title}\n                  url={article.url}\n                  image={article.urlToImage}\n                />\n              })}\n            </div>\n          </div>\n          {!isEmpty && !loading && (\n            <div className=\"my-5 text-center\">\n              <button\n                className=\"btn btn-primary btn-large\"\n                onClick={() => this.fetchNextPage()}>\n                Load More\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n \nexport default App;\n","export function newsApi(page = 1) {\n  let url = `https://newsapi.org/v2/top-headlines?country=us&category=technology&apiKey=d876e43be4e44cf78381b3814d7998e0&page=${page}`;\n  return fetch(url)\n    .then(response => {\n      return response.json()\n    })\n    .then(data => {\n      return data;\n    })\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './pages/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/loading.41c8cc4a.svg\";"],"sourceRoot":""}